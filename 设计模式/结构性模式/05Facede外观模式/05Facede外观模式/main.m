//
//  main.m
//  05Facede外观模式
//
//  Created by 华惠友 on 2019/5/13.
//  Copyright © 2019 华惠友. All rights reserved.
//

#import <Cocoa/Cocoa.h>
#import "LH4SWaiter.h"

int main(int argc, const char * argv[]) {
    
    /**
     1.定义: 外观模式要求一个子系统的外部与内部的通信必须通过一个统一的对象进行。外观模式提供一个高层次的接口，用来访问子系统中的一群接口。外观模式又称为门面模式
     2. 使用场景： 当一个复杂子系统需要提供一个简单的调用接口时可以使用外观模式。
     4.优点： 使用此模式可以将复杂的API代码隐藏到一个简单的接口中，减少调用者直接对复杂API的依赖和耦合。修改时也只需要修改简单的接口即可。
     5.缺点： 不太遵守开闭原则，一旦发现有一些操作的时候，或者在增加新的子系统的时候，可能需要修改外观类代码，可能会造成一些风险。
     */
    
    /**
     （1）设计初期阶段，应该有意识的将不同层分离，层与层之间建立外观模式。
     （2）开发阶段，子系统越来越复杂，增加外观模式提供一个简单的调用接口。
     （3）维护一个大型遗留系统的时候，可能这个系统已经非常难以维护和扩展，但又包含非常重要的功能，为其开发一个外观类，以便新系统与其交互
     */
    LH4SWaiter *_waiter;
    
    _waiter = [[LH4SWaiter alloc] init];
    
    // 现金买车
    [_waiter buyCarWithCash];
    // 贷款买车
    [_waiter buyCarWithLoad];
    
    return 0;
}
